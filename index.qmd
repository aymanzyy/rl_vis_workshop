---
format:
  revealjs:
    title-block-style: none
    slide-number: c
    title-slide-style: default
    incremental: true #do later
    chalkboard:
      buttons: false
    auto-animate: true
    reference-location: section
    touch: true
    pause: false
    footnotes-hover: true
    citations-hover: true
    preview-links: true
    controls-tutorial: true
    controls: false
    history: false
    theme: [css/dark.scss]
    callot-style: simple
    css: [css/default.css, css/callouts.css]
    self-contained: false
    embed-resources: false
    self-contained-math: false
    center: true
    highlight-style: "atom-one"
    default-image-extension: svg
    code-line-numbers: true
    code-overflow: scroll
    html-math-method: katex
    fig-align: center
    mermaid:
      theme: dark
  gfm:
    output-file: "README.md"
---

# {.title-slide .centeredslide background-video="https://web.cels.anl.gov/projects/alcf_vis_internal/HARVEY/sc23_arteries_sunspot_25fps_01.mp4" background-video-loop="true" loading="lazy"}

::: {style="background-color: rgba(22,22,22,0.75); border-radius: 10px; text-align:center; padding: 0px; padding-left: 1.5em; padding-right: 1.5em; max-width: min-content; min-width: max-content; margin-left: auto; margin-right: auto; padding-top: 0.2em; padding-bottom: 0.2em; line-height: 1.5em!important;"}
<span style="color:#939393; font-size:1.5em; font-weight: bold;">Workshop 6: Visualization</span>  
<span style="color:#777777; font-size:1.2em; font-weight: bold;">How to make your work look beautiful</span>  
[<br>&nbsp;]{style="padding-bottom: 0.5rem;"}  
[{{< fa solid home >}}](https://aymanzyy.github.io) Ayman Yousef 
:::

::: footer
[2024-09-04 @ [Randles Lab Workshop Series](https://randleslab.pratt.duke.edu)]{.dim-text style="text-align:left;'}
:::

# Overview

1. [Background](#background)
    - [Discovery](#discovery)
    - [Dissemination](#dessi)
    - [Debugging](#debugging)
2. [What's Out There](#wecare)
    - [Types of Visualization](#documentation)
3. [ParaView Overview](#paroverview)
4. [ParaView Usage](#parusage)
5. [ParaView Filters](#filters)
6. [ParaView Walkthrough](#walkthrough)
7. [ParaView Animations](#animations)



# Background {#background .centeredslide}

:::: {.columns}

::: {.fragment .fade-in-then-out-out}
- As someone who has been entrenched in visualization, it's hard to overstate the **importance** of vis.

  - <span style="color:#7b5e7b;">Ex</span>: Discovery, offering a different representation and perspective
  
  - <span style="color:#b9f18c;">Ex</span>: Better disseminate your research amongst peers and general audiences

  - <span style="color:#1c0221;">Ex</span>: Tool for debugging/error-handling 

:::

::: {.fragment .fade-in-then-out-out}
Visualization is often passed off as a less important tool in your arsenal, but it can just as effective as traditional analysis routines <span style="color:#9c90fa;">expected</span>. 

:::
::::


## Discovery {#discovery .centeredslide}
::: {.fragment .fade-in-then-out-out}
![](assets/in_the_thick_of_it_blue_orange_inverted copy.jpeg){width=90%}
:::
## Dessimination {#dessi .centeredslide}
::: {.fragment .fade-in-then-out-out}
![](assets/split_up_geom_copy.jpg){width=90%}
:::
## Debugging {#debugging .centeredslide}
::: {.fragment .fade-in-then-out-out}
![](assets/wtf.jpg){width=90%}
:::


# What's Out There? {#wecare .centeredslide}

:::: {.columns}

::: {.column width="50%"}

::: {.fragment .fade-in-then-out-out}
 - ParaView
 - Visit 
 - NVIDIA Omniverse
 - Python-based Visualization
:::

::: {.fragment .fade-in-then-out-out}
::: {.callout-important title="What should I use"}
- Most of our lab is proficient in ParaView, so I suggest getting good at it over more obscure vis APIs
:::
:::


:::

::: {.column width="49%"}

![](https://www.paraview.org/wp-content/uploads/2022/10/paraview.png){width=60%}
:::

::::

## Types of Visualization {#documentation .centeredslide}
:::: {.columns}

::: {.column width="50%"}

::: {.fragment .fade-in-then-out-out}
- **Post Hoc Visualization** 
  - Save data to disk/storage
  - Loaded in to visualization API
  - Save images, plots to disk

- **In Situ**
  - Data remains in memory
  - Data is passed to visualization API
  - Save images, plots to disk

- **Notebook visualization**
  - Load data in to Jupyter notebook
  - Utilize vis modules
    - Matplotlib
    - Etc. 
:::

:::


::: {.column width="49%"}

::: {.fragment .fade-in-then-out-out}
![](assets/streamlines_with_specular.png){width=75%}
![](assets/cell_python_vis.png){width=75%}
:::

:::
::::

# ParaView (Kitware) {#paroverview .centeredslide}
:::: {.columns}

::: {.column width="50%"}

 - An open-source (BSD 3 Clause License), scalable, multi-platform visualization application based on VTK
 - Support **parallelism**, extreme-scale visualization

- Utilities:
  - CPU - VTK
  - GPU - VTKm


:::

::: {.column width="49%"}
![](https://www.paraview.org/Wiki/images/e/e1/ParaView_UsersGuide_ParaViewLogo.png){width=90%}

![](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSWQmrTHNB0ZhJBb9eRmAOurSGDASATPedvmQ&s){width=90%}
:::

::::

## ParaView - Portability {.centeredslide}
:::: {.columns}

::: {.column width="50%"}

- **On the Desktop**: 
  - Post hoc analysis
  - Most common method
  - Best for small scale data
- **On the Web**:
  - Trame
  - VTK.js
  - ParaView Glance/Visualizer/Lite
- **Remote Work**: 
  - Remotely connect to servers
  - **<span style="color:#4e518b;">Ex:</span>** Polaris, Cooley

:::
::: {.column width="49%" style="font-size:0.59em;"}
![](https://www.kitware.com/main/wp-content/uploads/2017/10/paraviewweb-visualizer-e1509379710554-2048x1320.png){width=90%}

![](https://www.kitware.com/main/wp-content/uploads/2022/09/sc2022-trame.png){width=40%}
:::

::::

## ParaView - Building Blocks {.centeredslide}

- ParaView utilizes the VTK (the Visualization Toolkit) model as its backbone for data representation

- Data is transformed through algorithms, present in ParaView as Filters & Sinks (not common)

![](https://docs.paraview.org/en/v5.9.1/_images/VTKPipeline.png){width=90%}


## ParaView - VTK Data Model {.centeredslide}

![](https://i.gyazo.com/c898a380aaa5605ba78733fb42ab8f18.jpg){width=90%}


# ParaView Usage {#parusage .centeredslide}
:::: {.columns}

Let's go through the basics

:::: 

## Toolbar {.centeredslide}
:::: {.columns}

![](https://gyazo.com/54f8ee7c0ce9794e11e7a476a5713db4){width=100%}

 - Houses icons for most of the tools, filters, features etc. that users use
 - Some of the most frequently used are:
    - Reset Session
    - Import File/Open
    - Toggle Color Bar
 - Alternatively, you can also just find all of these by moving your mouse to the top of your computer and scrolling through 
::::

## Pipeline Browser {.centeredslide}
:::: {.columns}
::: {.column width="49%"}
![](https://gyazo.com/e088acc56246b525fba02c8cbf17451c){width=110%}
:::

::: {.column width="49%"}
- ParaView handles different objects and filters via a pipeline.
- Pipelines allow users to build off existing objects and filters to continuously create new ones
- Things shown in the pipeline browser include:
  - Sources (Data)
  - Filters (Data Manipulation)
  - Readers
  - Extractors 
- The pipeline browser indiciates data objects and their individual structures/pipelines
  - Filters are formatted with an indentation to mark they are of a pipeline 
:::
::::


## Properties Browser {.centeredslide}
:::: {.columns}

::: {.column width="50%"}
- Each object has its own properties that can be updated
- The editable properties depend on the object type but a few of the standard ones include: 
  - <span style="color:#ff8281;">Representation</span> 
    - Points
    - Surface
    - Volume
  - <span style="color:#7b5e7b;">Coloring</span>  
    - Parameter to Color By
    - Color Bar 
  - <span style="color:#7678ed;">Styling/Lighting</span> 
    - Opacity
    - Specular
  - <span style="color:#9c90fa;">Background</span>
:::

::: {.column width="49%"}
![](https://gyazo.com/c237a258c3f96b007220e929b495d4ee)
:::


::::

## Camera Controls {.centeredslide}
:::: {.columns}

![](https://i.gyazo.com/0045b49903efd9c91dcbdba04f3649f3.png)

- To interact with an object, you can use the camera controls
- Controls include:  
  - Zoom To Box
  - Set View Direction To (+X,+Y,+Z) and (-X, -Y, -Z)
  - Rotate Clockwise and Counterclockwise
  - Zoom to Data
  - Reset

::::

## Some Smaller Things {.centeredslide}
:::: {.columns}

![](https://gyazo.com/04fe2275761b18f8061faad898fa75ab)

- Auto Apply, I recommend having it on
- The color bar is highly configurable, explore with different color maps
- MultiView is useful when wanting to compare two different datasets 
::::


::: {.fragment .fade-in-then-out-out}
**There's more in the ParaView guide published online**
:::

# ParaView: Filters {#filters .centeredslide}
:::: {.columns}

::: {.column width="50%"}

- "Filters are functional units that process the data to generate, extract, or derive features from the data."

- Filters can be applied to sources (data imported) or even other filters to further modify an object. You can see the data flow in your Pipeline Browser

- Common Filters:
  - Slice
  - Clip
  - Threshold
  - Glyph
  - Stream Tracer
:::

::: {.column width="49%"}
![](https://gyazo.com/0d062b1dac22b10e6834a2047b8821fe){width=75%}
:::
::::

## Clip/Slice {.centeredslide}
:::: {.columns}

::: {.column width="50%"}
- **Clip** is used to extract a portion of an object defined by a plane/shape
  - **<span style="color:#4e518b;">Ex:</span>** Remove left-hand portion of a cube 
  - **<span style="color:#4e518b;">Ex:</span>** Remove all elements to the right of a plane in order to see what's "inside"

- **Slice** is used to extract a specific plane
  - **<span style="color:#4e518b;">Ex:</span>** Extract fluid fields at the centerline/axial position to inform of hemodynamic metrics there
  - **<span style="color:#4e518b;">Ex:</span>** 2D Flow Field Contouring 
:::

::: {.column width="49%"}
![](assets/mbt_animation_for_tutorial_slower_magma.gif)
![](assets/clip_sphere_4k_0.png)
:::

::::
## Threshold {.centeredslide}
:::: {.columns}


::: {.column width="50%"}

::: {.fragment .fade-in-then-out-out}
::: {layout-nrow=2}
![Full Cube](https://i.gyazo.com/fd200dd8627dfc023a6b05a86d97e5a7.png){width=40%}
![Fluid Points Only](https://gyazo.com/b1e7462bd23dd09fa2d90af499c46965){width=42%}
![Inlet Points Only](https://gyazo.com/b549732bc1d559af866b41a1721d8c09){width=50%}
:::
:::
:::
::: {.column width="50%"}
- Thresholding is used to extract specific cells that fall within a predefined range
  - **<span style="color:#4e518b;">Ex:</span>** Remove all xlet points
  - **<span style="color:#4e518b;">Ex:</span>** Remove all cells of a specific ID
- Highly configurable and criminally underutilized
- Believe you can only threshold based on "Cell Data"
:::


::::
## Glyph {.centeredslide}
:::: {.columns}

::: {.column width="50%"}
- Glyph is used to replace point data with a predefined shape or glpyh.
  - The glyphs may be oriented by a vector and scaled by a vector or scalar.
  - Useful for both visualization and analysis purposes
- Preferrable when working with cell and fluid data 
  - **<span style="color:#4e518b;">Ex:</span>** Wendy visualizing fluid flow around a cell
  - **<span style="color:#4e518b;">Ex:</span>** Chris visualizing fluid flow around a bifurcation
:::

::: {.column width="49%"}

::: {.fragment .fade-in-then-out-out}
![](https://gyazo.com/dca88a4c8078f40918644f4e75034896)
:::

:::
::::


## Stream Tracer {.centeredslide}
:::: {.columns}

- My favorite of all the filters, stream tracer takes point data and converts it 
- Stream Tracer seeds a vector field with points and then traces those seed points through the vector field
- The seeded points are configurable by either a line or a sphere with different resolutions (aka number of seeds) allowable
- Again, very useful when working with both fluid and fluid + cell data

::::

## Stream Tracer Cont. {.centeredslide}
:::: {.columns}
![](assets/plinko_ctc_cell_pressure_infernomap.png)
::::

## Stream Tracer Cont. 2 {.centeredslide}
:::: {.columns}
![](assets/higher_quality_full_geom_cardiomems.jpeg)
::::


# How Do We Use Filters? {#walkthrough .centeredslide}
::::{.columns}

::: {.column width="50%"}
- Let's try using a couple of filters with a provided example dataset. Make sure you've downloaded cube_ex.tar and unzip it 
- We'll start off with creating:
  - Clipping the cube
  - Thresholding out all non-fluid points
  - Creating a stream line visualization
  - Create glyphs based on the streamline
:::

::::

## Load The Dataset In {.centeredslide}
::::{.columns}

![](https://gyazo.com/17e376c2262982ebf571493f11fec7d9)

::::

## Add a Clip Filter {.centeredslide}
:::: {.columns}

![](https://gyazo.com/bcf4f258dc2ebece21f1afef9d02f4d3)

::::

## Add a Clip Filter Cont. {.centeredslide}
:::: {.columns}

![](https://gyazo.com/323b14cf74db4a830818c1a7b0704fa3)

::::

## Color Your Data by ID and Threshold {.centeredslide}
:::: {.columns}

![](https://gyazo.com/ee116ade5726bf7ad883f5eb4f9189e1)

::::

## Adjust Thresholding to Show Only Fluid {.centeredslide}
:::: {.columns}

![](https://gyazo.com/f3c6db7ee65e5bf9b021a36ac63675ef)

::::

## Restart by Deleting Everything but Data {.centeredslide}
:::: {.columns}

- I want you guys to get comfortable with the workflow, so go ahead and delete everything but your data 
- Make sure you pay attention to the Pipeline Browser and the different methods for deleting data 
- Once you are done, show me your screens 

::::

## Convert dataset to "Point Data" {.centeredslide}
:::: {.columns}

- Some filters are only available for point-based datasets due to the structural differences between cell and point data

- Cell data is defined by elements of a defined shape. The way we represent fluid data is by converting points to elements of the shape type Hexahedron. The fluid point is centered around this hexahedron

- Point data is as you can imagine, with us defining each point individually. Points are connected via a "connectivity" array. Red blood cells/CTCs are made up of points and connectivities
::::

## Convert to Point Data  {.centeredslide}
:::: {.columns}

![](https://gyazo.com/bb1af0dc3751f2de76da8f37a07655b9)

::::


## Create Streamlines via the Stream Tracer {.centeredslide}
:::: {.columns}


I'll let you guys struggle with this one a little bit. I want you guys to get to the point you get a similar looking visualization. 

![](https://gyazo.com/fa5efe884820c382acd0395d7ff18a8d)

::::

## Apply the Tube Filter to your streamlines {.centeredslide}
:::: {.columns}
::: {.column width="49%"}
- Your streamlines are very thin, so adding a shape-based filter can help make things clearer. 
- I want you to again struggle a bit with this, adding a Tube filter. 
- Adjust it to match these parameters
:::

::: {.column width="50%"}

![](https://gyazo.com/d15796b6edf6a7cc95dbc87c4e705211)

::: 
::::

## Add Glyphs to Visualization pipeline {.centeredslide}

![](https://gyazo.com/719932ee4f8b8ea7f8d6653cc2483226)

You guessed it, I want you to struggle a bit more. Now add a Glpyh filter. Once you are done, you should get to a visualization similar to what I have above

# ParaView Animations {#animations .centeredslide}

![](assets/mbt_animation_for_tutorial_slower_magma.gif)

## Load in Data and Make a Slice {.centeredslide}

::: {.column width="50%"}
- For this part, I'll give you a little more freedom
- Load in the data (mbt_for_tutorial.pvd) and make a slice of the data. Visualize only the slice
- For reference, this is what my slice looks like 
:::

::: {.column width="50%"}
![](https://gyazo.com/e67ef5964cf8d76ce6fe797e59149579){width=60%}
:::
## Animation View {.centeredslide}

- You'll see at the top of the ParaView application buttons that look familiar (a Play, Pause, Skip button)
- These are used for animations. The data you loaded in is temporal/time series. If data is loaded in correctly, it enables you to play animations

![](https://gyazo.com/2ccb76d015c6eed6ac161fa0f9a9c8d1)

## Time Manager {.centeredslide}

- In newer versions of ParaView, there is no dedicated View for animations. It is now integrated into a new view called "Time Manager"

- Opening up the Time Manager view enables us more control over the temporal aspects of our dataset and change how we animate Things

- Actually explaining how much you can do is out of the scope of this tutorial and my knowledge but you can explore on your own

![](https://i.gyazo.com/ba88509687f7a07689439164668d7022.png)

## Let's Make an Animations {.centeredslide}

- With your slice, try "Playing" the animation by pressing the play buttons

- What do you notice about the animation and the geometry?

- Let me know once you've guys have something playing. For bonus points that amount to nothing, try looping your animation and reversing It

## Exporting an Animation {.centeredslide}

- Once we want to actually see our animation as it was meant to, find the "Save Animation" option

- There are a number of options/settings you can change. For now, just save it with a 1920 x 1080 ratio, at a frame rate of 10, and with the lowest level of compression

![](https://gyazo.com/ca8f20e0f41a12a6fe8c6af88f43b0c2)

## What Else Can we Do 

- Camera Tracking
- Animating pathlines, streamlines 
- Who knows, not me

# Differt Avenues for visualization

## ParaView Python Scripting {.centeredslide}

- pvPython is "the Python intreface to ParaView. You can think of PvPython as ParaView with a Python interface."
- pvBatch is basically pvPython that can be launched in parallel and doesn't contain/interface with a GUI

## Ascent/SENSEI {.centeredslide}

- Ascent is "an open source many-core capable lightweight in situ visualization and analysis infrastructure for multi-physics HPC simulations."
- Ascent has vaulted SENSEI to become the in situ infrastructure that the lab is to use. This is because its integration of VTK-m and consistent support from the developers

- SENSEI is "an open-source, generic in situ interface that allows parallel simulations or other data producers to code-couple to parallel third-party endpoints"
- If using research_gpu, this branch still uses SENSEI due to the availability of SENSEI on the DCC. It allows similar functionality to Ascent but not as widespread adoption or integration into other existing APIs

## In Situ Visualization {.centeredslide}

- In situ, or "in place", visualization is visualization at the time of simulation rather than post hoc or after the fact 

- The idea behind in situ visualization is that understanding the dynamics/progression of a simulation can not only be more useful but can be cost-saving, using already occupied resources/memory 

- Different flavors of in situ analysis exists:
  - In-line/blocking
  - In transit
  - Hybrid
- If you're interested: <https://cdux.cs.uoregon.edu/pubs/ChildsIJHPCA.pdf>

## In Situ Visualization within HARVEY {.centeredslide}

- I've instrumented in situ analysis using both Ascent and SENSEI in different branches of HARVEY to use
- The research_gpu branch contains the version using SENSEI
- The harveycuda_ascent branch contains the version using Ascent
- To learn more about how to perform in situ visualization, I'll be uploading the tutorial on vis later today (hopefully)

## Connecting Ascent/SENSEI to ParaView {.centeredslide}

- Both Ascent and SENSEI allow users to perform visualization within ParaView, which means we have to the ability to perform similar visualization routines we normally would post hoc
- Does require a priori knowledge of what/where you want to visualize, at least for now